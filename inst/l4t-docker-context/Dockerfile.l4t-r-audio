FROM nvcr.io/nvidia/l4t-base:r32.4.2
LABEL maintainer="M. Edward (Ed) Borasky <znmeb@znmeb.net>"

ARG DEBIAN_FRONTEND=noninteractive
ARG SOURCE_DIR=/usr/local/src
ENV PAPERSIZE=letter

USER root
WORKDIR $SOURCE_DIR/

RUN locale-gen en_US.UTF-8 \
  && update-locale \
    LANG=en_US.UTF-8 \
    LC_CTYPE=en_US.UTF-8 \
    LC_NUMERIC=en_US.UTF-8 \
    LC_TIME=en_US.UTF-8 \
    LC_COLLATE=en_US.UTF-8 \
    LC_MONETARY=en_US.UTF-8 \
    LC_MESSAGES=en_US.UTF-8 \
    LC_PAPER=en_US.UTF-8 \
    LC_NAME=en_US.UTF-8 \
    LC_ADDRESS=en_US.UTF-8 \
    LC_TELEPHONE=en_US.UTF-8 \
    LC_MEASUREMENT=en_US.UTF-8 \
    LC_IDENTIFICATION=en_US.UTF-8 \
  && cat /etc/default/locale

# upgrade the OS
COPY apt-upgrade.bash $SOURCE_DIR/
RUN $SOURCE_DIR/apt-upgrade.bash > apt-upgrade.log 2>&1; \
  gzip -9 apt-upgrade.log

# install R
COPY r-latest.bash R.conf $SOURCE_DIR/
RUN $SOURCE_DIR/r-latest.bash > r-latest.log 2>&1; \
  gzip -9 r-latest.log

# install RStudio Server
ARG RSTUDIO_VERSION_MAJOR=1
ARG RSTUDIO_VERSION_MINOR=3
ARG RSTUDIO_VERSION_PATCH=959
ARG RSTUDIO_VERSION=$RSTUDIO_VERSION_MAJOR.$RSTUDIO_VERSION_MINOR.$RSTUDIO_VERSION_PATCH
ARG PACKAGE_FILE=rstudio-server-$RSTUDIO_VERSION-arm64.tar.gz

COPY --from=znmeb/tarball $SOURCE_DIR/rstudio/build/$PACKAGE_FILE $SOURCE_DIR/ 
RUN tar --directory=/ --strip-components=1 --verbose --extract --file=$SOURCE_DIR/$PACKAGE_FILE \
  > install-tarball.log 2>&1; gzip -9 install-tarball.log

# configure RStudio Server
COPY rstudio-configure.bash rserver.conf $SOURCE_DIR/
RUN $SOURCE_DIR/rstudio-configure.bash

# create non-root user with 'sudo' privilege
RUN useradd \
  --shell /bin/bash \
  --user-group \
  --groups sudo \
  --create-home \
  --uid 1000 r-audio \
  && echo "r-audio:r-audio" | chpasswd

# set up the user
ARG HOME=/home/r-audio

# Populate 'r-audio' home
COPY --chown=r-audio:r-audio bash_aliases $HOME/.bash_aliases
COPY --chown=r-audio:r-audio Rprofile $HOME/.Rprofile
COPY --chown=r-audio:r-audio Renviron $HOME/.Renviron
RUN echo "MAKE='make --jobs=$(nproc)'" >> $HOME/.Renviron; cat $HOME/.Renviron
COPY --chown=r-audio:r-audio Installers $HOME/Installers

# install dependencies for Python and R packages
RUN $HOME/Installers/python-apt.bash > $HOME/Installers/python-apt.log 2>&1; \
  gzip -9 $HOME/Installers/python-apt.log
RUN $HOME/Installers/R-apt.bash > $HOME/Installers/R-apt.log 2>&1; \
  gzip -9 $HOME/Installers/R-apt.log
RUN chown -R r-audio:r-audio $HOME/

ENV PROJECT_HOME=$HOME/Projects
ENV WORKON_HOME=$HOME/.virtualenvs

USER r-audio
WORKDIR $HOME/

# set up Python virtulaenv and R library
RUN $HOME/Installers/create-venvs.bash > $HOME/Installers/create-venvs.log 2>&1; \
  gzip -9 $HOME/Installers/create-venvs.log

# install Python packages
RUN $HOME/Installers/pip-installs.bash > $HOME/Installers/pip-installs.log 2>&1; \
  gzip -9 $HOME/Installers/pip-installs.log

# install R packages
RUN $HOME/Installers/R-installs.R > $HOME/Installers/R-installs.log 2>&1; \
  gzip -9 $HOME/Installers/R-installs.log
RUN $HOME/Installers/tinytex.R > $HOME/Installers/tinytex.log 2>&1; \
  gzip -9 $HOME/Installers/tinytex.log

# switch back to root
USER root
WORKDIR $SOURCE_DIR/

# set up entry point
COPY docker-entrypoint.sh /
CMD [ "/docker-entrypoint.sh" ]
